from fastapi import FastAPI, Request
import httpx
from state_machine import State, get_state, set_state, user_data
import os

app = FastAPI()

WAZZUP_TOKEN = os.getenv("WAZZUP_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "fe817b21-47a7-424e-a021-9b5200c4cf29"


async def send_message(chat_id: str, text: str):
    url = "https://api.wazzup24.com/v3/message"
    headers = {
        "Authorization": f"Bearer {WAZZUP_TOKEN}",
        "Content-Type": "application/json"
    }

    if not chat_id.endswith("@c.us"):
        chat_id = chat_id.replace("+", "").replace("@c.us", "") + "@c.us"

    data = {
        "channelId": CHANNEL_ID,
        "chatId": chat_id,
        "chatType": "whatsapp",
        "text": text
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=data, headers=headers)

    print("üì§ –û—Ç–≤–µ—Ç Wazzup:", response.status_code, await response.aread())


@app.post("/webhook/wazzup")
async def handle_webhook(request: Request):
    body = await request.json()
    print("üì© Webhook –ø–æ–ª—É—á–µ–Ω:", body)

    for msg in body.get("messages", []):
        # üîí –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ (echo –∏–ª–∏ direction != "in")
        if msg.get("isEcho") or msg.get("direction") != "in":
            print("‚Ü™ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: echo –∏–ª–∏ –Ω–µ –≤—Ö–æ–¥—è—â–µ–µ")
            continue

        chat_id = msg.get("chatId", "").strip()
        text = msg.get("text", "").strip().lower()

        if not chat_id or not text:
            print("‚ùå –ù–µ—Ç chat_id –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.")
            continue

        print(f"üë§ chatId: {chat_id}, üí¨ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        state = get_state(chat_id)

        # FSM: –ª–æ–≥–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        if state == State.START:
            set_state(chat_id, State.CLIENT_TYPE)
            await send_message(chat_id,
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –ø–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.\n"
                "–í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ:\n"
                "1Ô∏è‚É£ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
                "2Ô∏è‚É£ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
                "3Ô∏è‚É£ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
            )

        elif state == State.CLIENT_TYPE:
            if text in ["1", "1Ô∏è‚É£", "—é—Ä", "—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"]:
                set_state(chat_id, State.INN)
                await send_message(chat_id, "–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –ò–ù–ù.")
            elif text in ["2", "2Ô∏è‚É£", "–≥–æ—Å", "–≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ"]:
                set_state(chat_id, State.GOV_INN)
                await send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ò–ù–ù —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.")
            elif text in ["3", "3Ô∏è‚É£", "—Ñ–∏–∑", "—Ñ–∏–∑–ª–∏—Ü–æ"]:
                set_state(chat_id, State.BLOCKED)
                await send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —é—Ä–ª–∏—Ü–∞–º–∏ –∏ –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.")
            else:
                await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1Ô∏è‚É£, 2Ô∏è‚É£ –∏–ª–∏ 3Ô∏è‚É£.")

    return {"status": "ok"}
