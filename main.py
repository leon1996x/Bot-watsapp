from fastapi import FastAPI, Request
import httpx

from state_machine import get_state, set_state, State

app = FastAPI()

WAZZUP_TOKEN = "4e68fe2f438140b0ba531c114509b1e9"
WEBHOOK_URL = "https://bot-watsapp-y7e8.onrender.com/webhook/wazzup"
CHANNEL_ID = "fe817b21-47a7-424e-a021-9b5200c4cf29"


@app.on_event("startup")
async def startup_event():
    print("üî• THIS IS THE RIGHT MAIN.PY")
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")


@app.get("/")
async def root():
    return {"message": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"}


@app.get("/webhook/wazzup")
@app.head("/webhook/wazzup")
async def wazzup_webhook_check():
    return {"status": "ok"}


@app.post("/webhook/wazzup")
async def handle_webhook(request: Request):
    body = await request.json()
    print("üì© Webhook –ø–æ–ª—É—á–µ–Ω:", body)

    try:
        for msg in body.get("messages", []):
            chat_id = msg.get("chatId", "").strip()
            text = msg.get("text", "").strip().lower()

            if not chat_id or msg.get("isEcho"):
                continue

            print(f"üë§ chatId: {chat_id}, üí¨ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

            state = get_state(chat_id)

            if "–º–µ–Ω–µ–¥–∂–µ—Ä" in text:
                await send_message(chat_id, "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°–ø–∞—Å–∏–±–æ!")
                set_state(chat_id, State.FINISH)
                continue

            if state == State.START:
                await send_message(chat_id,
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –ø–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫—Ç–æ –≤—ã:\n"
                    "‚Äî –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
                    "‚Äî –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
                    "‚Äî –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
                )
                set_state(chat_id, State.CLIENT_TYPE)

            elif state == State.CLIENT_TYPE:
                if "—é—Ä" in text or "—é—Ä–∏–¥–∏—á" in text:
                    await send_message(chat_id, "–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –ò–ù–ù.")
                    set_state(chat_id, State.INN)
                elif "–≥–æ—Å" in text or "—É—á—Ä–µ–∂–¥–µ–Ω–∏" in text:
                    await send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ò–ù–ù —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.")
                    set_state(chat_id, State.GOV_INN)
                elif "—Ñ–∏–∑" in text or "—Ñ–∏–∑–∏—á–µ—Å–∫" in text:
                    await send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
                    set_state(chat_id, State.START)
                else:
                    await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ: ¬´–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ¬ª –∏–ª–∏ ¬´–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ¬ª.")

            elif state == State.INN:
                await send_message(chat_id,
                    "–î–ª—è —á–µ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç—Å—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:\n"
                    "1. –î–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
                    "2. –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–æ—Ä–≥–∞—Ö\n"
                    "3. –î–ª—è –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ"
                )
                set_state(chat_id, State.PURPOSE)

            elif state == State.PURPOSE:
                if "1" in text or "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" in text:
                    await send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–∫—É–ø–∫–∏.")
                    set_state(chat_id, State.ADDITIONAL_INFO)
                elif "2" in text or "—Ç–æ—Ä–≥" in text:
                    await send_message(chat_id,
                        "–ú—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∏.\n"
                        "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–∫—É–ø–∫–∏."
                    )
                    set_state(chat_id, State.ADDITIONAL_INFO)
                elif "3" in text or "–≥–æ—Å" in text:
                    await send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ò–ù–ù –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è.")
                    set_state(chat_id, State.GOV_INN)
                else:
                    await send_message(chat_id,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ: ¬´1¬ª, ¬´2¬ª –∏–ª–∏ ¬´3¬ª ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏ –∑–∞–∫—É–ø–∫–∏."
                    )

            elif state == State.GOV_INN:
                await send_message(chat_id,
                    "–ö–∞–∫ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∑–∞–∫—É–ø–∫–∞:\n"
                    "1. –ü—Ä—è–º–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç\n"
                    "2. –ß–µ—Ä–µ–∑ —Ç–æ—Ä–≥–∏"
                )
                set_state(chat_id, State.GOV_METHOD)

            elif state == State.GOV_METHOD:
                if "1" in text or "–ø—Ä—è–º" in text:
                    await send_message(chat_id,
                        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
                        "–ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞—è–≤–∫—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –µ—ë –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."
                    )
                    set_state(chat_id, State.GOV_TS_EMAIL)
                elif "2" in text or "—Ç–æ—Ä–≥" in text:
                    await send_message(chat_id,
                        "–ú—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å —Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–¢–ó) –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞.\n"
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞?"
                    )
                    set_state(chat_id, State.GOV_EXTRA_SERVICES)
                else:
                    await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ: ¬´1¬ª ‚Äî –ø—Ä—è–º–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ ¬´2¬ª ‚Äî —Ç–æ—Ä–≥–∏.")

            elif state == State.GOV_TS_EMAIL:
                await send_message(chat_id, "–°–ø–∞—Å–∏–±–æ. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–∫—É–ø–∫–∏.")
                set_state(chat_id, State.ADDITIONAL_INFO)

            elif state == State.GOV_EXTRA_SERVICES:
                await send_message(chat_id,
                    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
                    "1. –ú–æ–Ω—Ç–∞–∂ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
                    "2. –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n"
                    "3. –ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ\n"
                    "4. –ù–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
                )
                set_state(chat_id, State.ADDITIONAL_INFO)

            elif state == State.ADDITIONAL_INFO:
                await send_message(chat_id, "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏ email).")
                set_state(chat_id, State.CONTACTS)

            elif state == State.CONTACTS:
                await send_message(chat_id,
                    "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.\n"
                    "–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–µ–Ω–µ–¥–∂–µ—Ä¬ª –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
                )
                set_state(chat_id, State.FINISH)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", str(e))

    return {"message": "–ü–æ–ª—É—á–µ–Ω–æ"}


async def send_message(chat_id: str, text: str):
    url = "https://api.wazzup24.com/v3/message"
    headers = {
        "Authorization": f"Bearer {WAZZUP_TOKEN}",
        "Content-Type": "application/json"
    }

    if not chat_id.endswith("@c.us"):
        chat_id = chat_id.replace("+", "").replace("@c.us", "") + "@c.us"

    data = {
        "channelId": CHANNEL_ID,
        "chatId": chat_id,
        "chatType": "whatsapp",
        "text": text
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=data, headers=headers)

    print("üì§ –û—Ç–≤–µ—Ç Wazzup:", response.status_code, await response.aread())


@app.get("/register")
async def register_webhook():
    print("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫...")
    print("üîë TOKEN:", WAZZUP_TOKEN)

    url = "https://api.wazzup24.com/v3/webhooks"
    headers = {
        "Authorization": f"Bearer {WAZZUP_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "webhooksUri": WEBHOOK_URL,
        "subscriptions": {
            "messagesAndStatuses": True,
            "contactsAndDealsCreation": True
        }
    }

    async with httpx.AsyncClient() as client:
        response = await client.patch(url, json=data, headers=headers)

    print("üì° Webhook registration response:", response.status_code)
    print("üì¨ Response text:", response.text)

    try:
        json_response = response.json()
    except Exception as e:
        return {
            "status_code": response.status_code,
            "response": {
                "error": "Failed to parse JSON",
                "details": str(e)
            }
        }

    return {
        "status_code": response.status_code,
        "response": json_response
    }
