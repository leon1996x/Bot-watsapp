from fastapi import FastAPI, Request
import httpx

from state_machine import get_state, set_state, State

app = FastAPI()

WAZZUP_TOKEN = "4e68fe2f438140b0ba531c114509b1e9"
WEBHOOK_URL = "https://bot-watsapp-y7e8.onrender.com/webhook/wazzup"
CHANNEL_ID = "fe817b21-424e-a021-9b5200c4cf29"


@app.on_event("startup")
async def startup_event():
    print("üî• THIS IS THE RIGHT MAIN.PY")
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")


@app.get("/")
async def root():
    return {"message": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"}


@app.get("/webhook/wazzup")
@app.head("/webhook/wazzup")
async def wazzup_webhook_check():
    return {"status": "ok"}


@app.post("/webhook/wazzup")
async def handle_webhook(request: Request):
    body = await request.json()
    print("üì© Webhook –ø–æ–ª—É—á–µ–Ω:", body)

    try:
        for msg in body.get("messages", []):
            chat_id = msg.get("chatId", "").strip()
            text = msg.get("text", "").strip()

            if not chat_id:
                print("‚ùå –ù–µ—Ç chatId –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
                continue

            print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {get_state(chat_id)}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
            state = get_state(chat_id)

            if state == State.START:
                print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {chat_id}: START ‚Üí CLIENT_TYPE")
                set_state(chat_id, State.CLIENT_TYPE)
                await send_message(chat_id,
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –ø–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.\n"
                    "–í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ:\n"
                    "1Ô∏è‚É£ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ\n"
                    "2Ô∏è‚É£ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
                    "3Ô∏è‚É£ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
                )

            elif state == State.CLIENT_TYPE:
                if text in ["1", "1Ô∏è‚É£", "—é—Ä", "—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"]:
                    print(f"üìä CLIENT_TYPE ‚Üí INN")
                    set_state(chat_id, State.INN)
                    await send_message(chat_id, "–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –ò–ù–ù.")
                elif text in ["2", "2Ô∏è‚É£", "–≥–æ—Å", "–≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ"]:
                    print(f"üìä CLIENT_TYPE ‚Üí GOV_INN")
                    set_state(chat_id, State.GOV_INN)
                    await send_message(chat_id, "–û—Ç–ª–∏—á–Ω–æ, —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ò–ù–ù —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.")
                elif text in ["3", "3Ô∏è‚É£", "—Ñ–∏–∑", "—Ñ–∏–∑–ª–∏—Ü–æ"]:
                    print(f"üìä CLIENT_TYPE ‚Üí BLOCKED")
                    set_state(chat_id, State.BLOCKED)
                    await send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —é—Ä–ª–∏—Ü–∞–º–∏ –∏ –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏.")
                else:
                    await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1Ô∏è‚É£, 2Ô∏è‚É£ –∏–ª–∏ 3Ô∏è‚É£.")

            elif state == State.BLOCKED:
                print(f"üîí {chat_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ BLOCKED ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")

            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å elif'—ã –ø–æ–¥ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:", str(e))

    return {"message": "–ü–æ–ª—É—á–µ–Ω–æ"}


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Wazzup
async def send_message(chat_id: str, text: str):
    url = "https://api.wazzup24.com/v3/message"
    headers = {
        "Authorization": f"Bearer {WAZZUP_TOKEN}",
        "Content-Type": "application/json"
    }

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ chat_id –∫ —Ñ–æ—Ä–º–∞—Ç—É chatId Wazzup (–Ω–∞–ø—Ä–∏–º–µ—Ä: 79651234567@c.us)
    if not chat_id.endswith("@c.us"):
        chat_id = chat_id.replace("+", "").replace("@c.us", "") + "@c.us"

    data = {
        "channelId": CHANNEL_ID,
        "chatId": chat_id,
        "chatType": "whatsapp",
        "text": text
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=data, headers=headers)

    print("üì§ –û—Ç–≤–µ—Ç Wazzup:", response.status_code, await response.aread())


@app.get("/register")
async def register_webhook():
    print("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫...")
    print("üîë TOKEN:", WAZZUP_TOKEN)

    url = "https://api.wazzup24.com/v3/webhooks"
    headers = {
        "Authorization": f"Bearer {WAZZUP_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "webhooksUri": WEBHOOK_URL,
        "subscriptions": {
            "messagesAndStatuses": True,
            "contactsAndDealsCreation": True
        }
    }

    async with httpx.AsyncClient() as client:
        response = await client.patch(url, json=data, headers=headers)

    print("üì° Webhook registration response:", response.status_code)
    print("üì¨ Response text:", response.text)

    try:
        json_response = response.json()
    except Exception as e:
        return {
            "status_code": response.status_code,
            "response": {
                "error": "Failed to parse JSON",
                "details": str(e)
            }
        }

    return {
        "status_code": response.status_code,
        "response": json_response
    }

